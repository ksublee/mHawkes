ALPHA <- matrix( c(alpha1n, 0, 0, alpha2n), nrow=2, byrow = TRUE)
}
Impact <- ALPHA
new_LAMBDA <- decayed_LAMBDA + Impact
lambda[i+1,] <- t(new_LAMBDA)
}
lambda
lambda <-  matrix(sapply(MU, c, numeric(length = length(inter_arrival) - 1)), ncol = 4)
MU
as.vector(MU)
lambda <-  matrix(sapply(as.vector(t(MU)), c, numeric(length = length(inter_arrival) - 1)), ncol = 4)
MU <- matrix(c(0.226, 0.226, 0.054, 0.054), nrow=2, byrow=T)
BETA <- matrix(rep(0.934, 4), nrow=2)
alpha1n <- 0.1335
alpha1w <- 0.5242
alpha2n <- 0.0295
alpha2w <- 0.1384
dimens <- 2
lambda <-  matrix(sapply(as.vector(t(MU)), c, numeric(length = length(inter_arrival) - 1)), ncol = 4)
colnames(lambda) <- c("lambda1u", "lambda1d", "lambda2u", "lambda2d")
sum_log_lambda <- 0
sum_integrated_lambda_component <- 0
n <- length(inter_arrival) - 1
for (i in 1:n) {
# current_LAMBDA <- matrix(lambda_component[i, ], nrow = dimens, byrow = TRUE)
if (i == 1) current_LAMBDA <- matrix(lambda[1,], nrow=2, byrow=T)
else current_LAMBDA <- new_LAMBDA  # LAMBDA determined in the previous loop
# update lambda
decayed <- exp(-BETA * inter_arrival[i+1])
decayed_LAMBDA <- current_LAMBDA * decayed
#print(decayed_LAMBDA)
#print(Impact)
# sum of integrated_lambda_component
sum_integrated_lambda_component <- sum_integrated_lambda_component + sum(current_LAMBDA / BETA * ( 1 - decayed ))
# sum of log lambda when jump occurs
lambda_lc <- MU + decayed_LAMBDA
sum_log_lambda <- sum_log_lambda + log(t(lambda_lc)[mark_type[i+1]] )
Impact <- matrix(rep(0, dimens^2), nrow = dimens)
if (C1[i+1] > C2[i+1] & (mark_type[i+1] == 1 |  mark_type[i+1] == 4)) {
ALPHA <- matrix( c(0, alpha1w, alpha2w, 0), nrow=2, byrow = TRUE)
} else if (C1[i+1] > C2[i+1] & (mark_type[i+1] == 2 |  mark_type[i+1] == 3)) {
ALPHA <- matrix( c(0, alpha1n, alpha2n, 0), nrow=2, byrow = TRUE)
} else if (C1[i+1] < C2[i+1] & (mark_type[i+1] == 2 |  mark_type[i+1] == 3)) {
ALPHA <- matrix( c(alpha1w, 0, 0, alpha2w), nrow=2, byrow = TRUE)
} else {
ALPHA <- matrix( c(alpha1n, 0, 0, alpha2n), nrow=2, byrow = TRUE)
}
Impact <- ALPHA
new_LAMBDA <- decayed_LAMBDA + Impact
lambda[i+1,] <- t(new_LAMBDA)
}
lambda
lambda[n,]
C1
length(C1)
length(lambda[,1])
C[1:10]
C1[1:10]
C2[1:10]
C2[1:100]
C1[1:100]
inter_arrival[1:100]
View(original1)
View(dataset1)
View(dataset2)
prob <- lambda/colsum(lambda)
prob <- lambda/colsums(lambda)
prob <- lambda/colSums(lambda)
View(prob)
colSums(lambda[1:10,])
prob <- lambda/rowSums(lambda)
View(prob)
mark_type[1:100]
sapply(mark_type[-1], function(idx)
{
x<- rep(0,4)
x[idx] <- 1
x
}
)
ob <- sapply(mark_type[-1], function(idx)
{
x<- rep(0,4)
x[idx] <- 1
x
}
)
ob
ob[1,]
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
for (i in 2:length(C1)){
x[i, mark_type[i]] <- 1
}
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
x
View(x)
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
for (i in 2:length(C1)){
x[i-1, mark_type[i]] <- 1
}
sum((x - prob)^2)
lambda <-  matrix(sapply(as.vector(t(MU)), c, numeric(length = length(inter_arrival) - 1)), ncol = 4)
length(inter_arrival)
length(lambda[,1])
prob <- lambda/rowSums(lambda)
prob <- prob[-1,]
sum((x - prob)^2)
View(prob)
View(prob)
prob <- lambda/rowSums(lambda)
View(prob)
colnames(lambda) <- c("lambda1u", "lambda1d", "lambda2u", "lambda2d")
sum_log_lambda <- 0
sum_integrated_lambda_component <- 0
n <- length(inter_arrival) - 1
for (i in 1:n) {
# current_LAMBDA <- matrix(lambda_component[i, ], nrow = dimens, byrow = TRUE)
if (i == 1) current_LAMBDA <- matrix(lambda[1,], nrow=2, byrow=T)
else current_LAMBDA <- new_LAMBDA  # LAMBDA determined in the previous loop
# update lambda
decayed <- exp(-BETA * inter_arrival[i+1])
decayed_LAMBDA <- current_LAMBDA * decayed
#print(decayed_LAMBDA)
#print(Impact)
# sum of integrated_lambda_component
sum_integrated_lambda_component <- sum_integrated_lambda_component + sum(current_LAMBDA / BETA * ( 1 - decayed ))
# sum of log lambda when jump occurs
lambda_lc <- MU + decayed_LAMBDA
sum_log_lambda <- sum_log_lambda + log(t(lambda_lc)[mark_type[i+1]] )
Impact <- matrix(rep(0, dimens^2), nrow = dimens)
if (C1[i+1] > C2[i+1] & (mark_type[i+1] == 1 |  mark_type[i+1] == 4)) {
ALPHA <- matrix( c(0, alpha1w, alpha2w, 0), nrow=2, byrow = TRUE)
} else if (C1[i+1] > C2[i+1] & (mark_type[i+1] == 2 |  mark_type[i+1] == 3)) {
ALPHA <- matrix( c(0, alpha1n, alpha2n, 0), nrow=2, byrow = TRUE)
} else if (C1[i+1] < C2[i+1] & (mark_type[i+1] == 2 |  mark_type[i+1] == 3)) {
ALPHA <- matrix( c(alpha1w, 0, 0, alpha2w), nrow=2, byrow = TRUE)
} else {
ALPHA <- matrix( c(alpha1n, 0, 0, alpha2n), nrow=2, byrow = TRUE)
}
Impact <- ALPHA
new_LAMBDA <- decayed_LAMBDA + Impact
lambda[i+1,] <- t(new_LAMBDA)
}
prob <- lambda/rowSums(lambda)
prob <- prob[-1,]
sum((x - prob)^2)
unip <- matrix(rep(0.25, (length(C1)-1)*4), ncol=4)
measure2 <- sum((x-unip)^2)
measure2
prob <- lambda/rowSums(lambda)
prob <- prob[-length(C1),]
measure <- sum((x - prob)^2)
unip[1:10,]
x[1:10,]
prob[1:10,]
lambda[1:10,]
p3 <- cbind(rep(0.33, length(C1)-1), rep(0.33, length(C1)-1), rep(0.16, length(C1)-1), rep(0.17, length(C1)-1))
measure3 <- sum((x-p3)^2)
0.226/sum(c(0.226, 0.226, 0.054, 0.054))
p3 <- cbind(rep(0.4, length(C1)-1), rep(0.4, length(C1)-1), rep(0.1, length(C1)-1), rep(0.1, length(C1)-1))
measure3 <- sum((x-p3)^2)
mean(prob[,1])
mean(prob[,2])
mean(prob[,3])
mean(prob[,4])
mark_type
measure <- sum((x[,1:2] - prob[,1:2])^2)
unip <- matrix(rep(0.25, (length(C1)-1)*4), ncol=4)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
p3 <- cbind(rep(0.4, length(C1)-1), rep(0.4, length(C1)-1), rep(0.1, length(C1)-1), rep(0.1, length(C1)-1))
measure3 <- sum((x[,1:2] - p3[,1:2])^2)
devtools::load_all(".")
devtools::load_all(".")
res2 <- mhsim(dimens=2)
res2
res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(C1),]
prob
prob <- prob[-length(prob),]
mark_type <- res2$mark_type
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
for (i in 2:length(C1)){
x[i-1, mark_type[i]] <- 1
}
x <- matrix(rep(0, (length(C1)-1)*4), ncol=4)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
prob <- prob[-length(prob),]
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_typ),]
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
unip <- matrix(rep(0.25, (length(C1)-1)*4), ncol=4)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
unip <- matrix(rep(0.5, (length(C1)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
rm(list=ls())
mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
rm(list=ls())
res2 <- mhsim(n=10000, dimnes=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
res2
res2 <- mhsim(n=10000, dimnes=2)
res2 <- mhsim(n=10000, dimens=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
rm(list=ls())
res2 <- mhsim(n=10000, dimens=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
rm(list=ls())
res2 <- mhsim(n=10000, dimens=2)
mark_type <- res2$mark_type
lambda <- res2$lambda
prob <- lambda/rowSums(lambda)
prob <- prob[-length(mark_type),]
x <- matrix(rep(0, (length(mark_type)-1)*2), ncol=2)
for (i in 2:length(mark_type)){
x[i-1, mark_type[i]] <- 1
}
measure <- sum((x[,1:2] - prob[,1:2])^2)
print(measure)
unip <- matrix(rep(0.5, (length(mark_type)-1)*2), ncol=2)
measure2 <- sum((x[,1:2] - unip[,1:2])^2)
print(measure2)
View(prob)
